<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Watts</title>
    <link>https://danbadge.github.io/</link>
    <description>Recent content on Daniel Watts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 Oct 2017 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://danbadge.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Taking retrospectives to the rest of the business</title>
      <link>https://danbadge.github.io/post/taking-retrospectives-to-the-rest-of-the-business/</link>
      <pubDate>Fri, 13 Oct 2017 12:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/taking-retrospectives-to-the-rest-of-the-business/</guid>
      <description>The Product Development team at Driftrock has been using retrospectives for just over a year and it&amp;rsquo;s served us really well. In that time we&amp;rsquo;ve made loads of improvements and changes to how we work. Those changes range from small tweaks to our process to large uncertain ideas which we trial for a limited period. Our process for a retrospective is fairly typical (in my experience); we do them fortnightly and we rotate the facilitator role who runs the session how they see fit.</description>
    </item>
    
    <item>
      <title>Driftrock&#39;s Journey to Continuous Delivery</title>
      <link>https://danbadge.github.io/post/journey-to-cd/</link>
      <pubDate>Fri, 31 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/journey-to-cd/</guid>
      <description>Over the last year, Driftrock has been on a fairly typical journey - you might have heard it before - we went from manual deployments and an apathy for shipping software to automated and repeatable deployments with a focus on delivering value.
Rather then bore you with yet another post about the merits of Continuous Delivery, though I would like to, I’ll attempt to focus instead on how we achieved this shift.</description>
    </item>
    
    <item>
      <title>How we do production release announcements at Driftrock</title>
      <link>https://danbadge.github.io/post/release-notes-at-driftrock/</link>
      <pubDate>Thu, 29 Dec 2016 16:51:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/release-notes-at-driftrock/</guid>
      <description>&lt;p&gt;At Driftrock we&amp;rsquo;re a small company that has grown from 8 to 18 people in the last 9 months. That&amp;rsquo;s not excessive but it still challenged some existing methods of communication. One of those was how we communicate new features which have recently gone live, somewhere along the way we stopped doing this.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enabling change on the 7digital Catalogue</title>
      <link>https://danbadge.github.io/post/enabling-change-on-the-7digital-catalogue/</link>
      <pubDate>Tue, 26 Aug 2014 16:51:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/enabling-change-on-the-7digital-catalogue/</guid>
      <description>Since February 2014 I’ve been working on the Content Discovery Team here at 7digital, we are responsible for every endpoint listed under Catalogue API here - http://developer.7digital.com/resources/api-docs/catalogue-api – and probably a few more. This is a mix of discovery endpoints and core catalogue endpoints often split by artist, albums (releases) and tracks. The discovery side of it consists of searching, recommendations, charts, genres, new and popular tracks and albums. The core catalogue endpoints are requests to the API for an album, tracks on an album, an artist, an artist’s releases or just track information using a 7digital unique identifier (referred to as releaseId, trackId and artistId).</description>
    </item>
    
    <item>
      <title>Ten deploys a day and still moving slowly</title>
      <link>https://danbadge.github.io/post/ten-deploys-a-day-and-still-moving-slowly/</link>
      <pubDate>Sun, 21 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/ten-deploys-a-day-and-still-moving-slowly/</guid>
      <description>There’s a feeling within my team at 7digital that we’re taking a long time to complete projects or features. Oddly this isn’t something we are currently measuring. We do though measure the throughput and cycle time of tasks. Tasks are items of work which the team create as a small iterative step towards a larger feature or story. This is useful for visualising the teams productivity, with the idealistic target of low cycle time and high throughput.</description>
    </item>
    
    <item>
      <title>The Lean Startup - Notes</title>
      <link>https://danbadge.github.io/post/the-lean-startup-notes/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/the-lean-startup-notes/</guid>
      <description>Finally I got round to reading Eric Ries’ well known book - the Lean Startup. This book often creeps into conversations and conferences so I was keen to see what was in there rather than relying on other’s insights.
From a developer point of view, it’s a fairly business-ey read as you might expect but there’s some great stuff in there and lots (and lots!) of examples from the technology industry as well as more traditional industries.</description>
    </item>
    
    <item>
      <title>Programming is a bit like football, isn&#39;t it?</title>
      <link>https://danbadge.github.io/post/programming-is-like-football/</link>
      <pubDate>Sun, 19 May 2013 16:51:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/programming-is-like-football/</guid>
      <description>The title of this blog post makes is purposefully tongue-in-cheek, let me attempt to explain. As a kid football was everything, I played a ridiculous amount. Lunchtime and after school kickabouts, perhaps training twice a week and then two matches at the weekend. It was great and academia was not so great. I was a pretty average student – not the worst, definitely not the best and certainly not interested. So naturally I grew up and became a Software Developer.</description>
    </item>
    
  </channel>
</rss>