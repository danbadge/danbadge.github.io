<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Watts</title>
    <link>https://danbadge.github.io/tags/deployment/index.xml</link>
    <description>Recent content on Daniel Watts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://danbadge.github.io/tags/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Driftrock&#39;s Journey to Continuous Delivery</title>
      <link>https://danbadge.github.io/post/journey-to-cd/</link>
      <pubDate>Fri, 31 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/journey-to-cd/</guid>
      <description>

&lt;p&gt;Over the last year, Driftrock has been on a fairly typical journey - you might have heard it before - we went from manual deployments and an apathy for shipping software to automated and repeatable deployments with a focus on delivering value.&lt;/p&gt;

&lt;p&gt;Rather then bore you with yet another post about the merits of Continuous Delivery, though I would like to, I’ll attempt to focus instead on how we achieved this shift. Inspired by the book &lt;a href=&#34;https://www.amazon.co.uk/d/Books/More-Fearless-Change-Strategies-Making-Ideas-Happen/0133966445&#34;&gt;More Fearless Change&lt;/a&gt; by Mary Lynn Manns &amp;amp; Linda Rising, I’ll do my best to remember the steps we took and more specifically the patterns we continue to use to try and change the team’s behaviours.&lt;/p&gt;

&lt;h2 id=&#34;rolling-back-the-year-s&#34;&gt;Rolling back the year(s)&lt;/h2&gt;

&lt;p&gt;First some context, back in June 2016 a change to any of our applications would meander it’s way into production. There was very little awareness of whether a change had been deployed, there was a frustratingly popular branching model that dramatically increased cognitive load and deployments were manually triggered from a developer&amp;rsquo;s machine via Heroku’s CLI.&lt;/p&gt;

&lt;p&gt;A new change from development to production looked a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://danbadge.github.io/img/articles/journey-to-cd/deployment-process-before.png&#34; alt=&#34;Deployment process before&#34; /&gt;
&lt;br /&gt;&lt;em&gt;Green - automated step.&lt;br /&gt;
Orange - unavoidable manual step or a manual step we’re not (yet) looking to change.&lt;br /&gt;
Red - avoidable manual step.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was also a number of inconsistencies in that deployment process depending on the application. Some didn’t have a staging environment, those that did may or may not have been automatically deployed staging and not all applications had automated tests run on master or any other branches. In short, it was unnecessarily complex, wildly inconsistent with little to no automation. So it’s no surprise that there was a lack of interest from the team when it came to deploying software.&lt;/p&gt;

&lt;p&gt;All of the above meant deployments were irregular and risky. More often than not a large batch of changes were pushed live, predictably increasing the likelihood of something going wrong and sometimes removing the ability to safely rollback.&lt;/p&gt;

&lt;h2 id=&#34;baby-steps&#34;&gt;Baby Steps&lt;/h2&gt;

&lt;p&gt;I’ll try to explain the steps we took and the relevant patterns we used to improve the scenario described above. At the very bottom of this page there is a reference for the patterns mentioned throughout these steps. Also you can find all the patterns conveniently &lt;a href=&#34;http://nebula.wsimg.com/4e8937e14b7a33327914aceddd3b11c0?AccessKeyId=C3C1767177F54BB8BF89&amp;amp;disposition=0&amp;amp;alloworigin=1&#34;&gt;listed and described here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-1-involve-everyone&#34;&gt;Step 1 - Involve Everyone&lt;/h3&gt;

&lt;p&gt;Unconventionally it started by improving our retrospectives. The team needed a platform to discuss problems and suggest improvements (&lt;em&gt;Involve Everyone&lt;/em&gt;). Though we were having a weekly chat called a retrospective this bared little resemblance to the retrospectives I had seen at several other companies. Originally this meeting was much closer to a weekly status update, it focussed on every day work items and their progress rather then looking at &lt;em&gt;how we can improve how we work&lt;/em&gt;. Suggesting and then demonstrating a more structured approach to retrospectives (by facilitating the first few retros) had a significant impact on the team beyond Continuous Delivery but one of the early discussion points was around how we deploy our software (&lt;em&gt;Plant the Seeds&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;step-2-just-do-it&#34;&gt;Step 2 - Just Do It&lt;/h3&gt;

&lt;p&gt;With the team a little uncertain about how a move towards Continuous Delivery might benefit them the next step was a simple one - show them an example (&lt;em&gt;Just Do It&lt;/em&gt;). I put together a simple HTTP API application with one endpoint that returned ‘200 OK’ and created a deployment pipeline in &lt;a href=&#34;https://snap-ci.com/&#34;&gt;Snap CI&lt;/a&gt;. I tried to mimic how we could treat our regular applications and only tackled the more immediate problems (&lt;em&gt;Pick Your Battles&lt;/em&gt;); manual deployments and managing multiple branches on deploy. The latter also &lt;a href=&#34;https://trunkbaseddevelopment.com/5-min-overview/&#34;&gt;reducing the distance&lt;/a&gt; between local development and production. Demonstrating that our deployment process could begin to evolve into this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://danbadge.github.io/img/articles/journey-to-cd/deployment-process-after.png&#34; alt=&#34;Deployment process step 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you might expect (like with working software) this became a great reference point for demoing and explaining the value of CD and how it compares to what we were doing.&lt;/p&gt;

&lt;h3 id=&#34;step-3-trial-run&#34;&gt;Step 3 - Trial Run&lt;/h3&gt;

&lt;p&gt;With that seed planted, a working example and regular problems shipping quality software (only highlighting the severity - &lt;em&gt;Wake-up Call&lt;/em&gt;) buy-in from the rest of the team was steadily increasing. The next step was to commit the team to moving a real application or two to the new system (&lt;em&gt;Trial Run&lt;/em&gt;). We took two problematic applications to validate our assumptions as early as possible, created deployment pipelines for them, got them successfully deploying and let that change settle in. At this point I thankfully had some help (&lt;em&gt;Ask for Help&lt;/em&gt;), making the progress much faster and the potential backlash easier to navigate.&lt;/p&gt;

&lt;h3 id=&#34;step-4-persistent-pr&#34;&gt;Step 4 - Persistent PR&lt;/h3&gt;

&lt;p&gt;One pattern mentioned in the book stood out for me throughout this process - Persistent PR. On reflection this subtly appeared in a number of places, sometimes intentional but often unintentionally. Here’s a breakdown of where it featured:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We changed our regular stand-up meeting so that it focussed first on what was deployed to production, then staging and then active development - typically known as &lt;a href=&#34;https://blog.matthewbutt.com/2016/05/16/reinvigorating-a-daily-stand-up-by-walking-the-board/&#34;&gt;Walk the Board&lt;/a&gt;. Although indirect, it provides a regular reminder to the team to be focussed first on shipping software and how we can progress work items into production.&lt;/li&gt;
&lt;li&gt;At a weekly company meeting we briefly demoed how we changed our approach to deploying software. Incidentally this came about by chance but it was an opportunity worth taking (&lt;em&gt;Smell of Success&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;We started to capture and communicate metrics around the number of deployments to production.&lt;/li&gt;
&lt;li&gt;We introduced a few feedback loops to help the flow of information around deployments:

&lt;ul&gt;
&lt;li&gt;Slack notifications - pushing information about failed builds or successful deployments. This meant developers didn’t need to go looking for the status of their change, it came to them.&lt;/li&gt;
&lt;li&gt;Release notes - &lt;a href=&#34;http://tech.driftrock.com/post/release-notes/&#34;&gt;we started announcing client-facing changes internally&lt;/a&gt; as and when they were rolled out. This helped generate interest and discussion around new features from people across the company.&lt;/li&gt;
&lt;li&gt;Monitoring - something we haven’t fully worked out yet, but we continue to experiment with monitoring and better ways to gather feedback from our production systems.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;so-where-are-we-now&#34;&gt;So, where are we now?&lt;/h2&gt;

&lt;p&gt;We’re currently deploying to production around 15 times a week, a good sustainable pace for our size team. We ended up moving approximately 30 projects to Snap CI. We created CD pipelines for a variety of applications; Ruby gems, Elixir packages, static sites hosted on AWS, web applications on Heroku and others hosted in Kubernetes. Everyone on the team takes ownership of ensuring a change they&amp;rsquo;re working on is deployed to production and they work closely with other team members to test the relevant functionality. We’re increasingly reliant on automated tests, &lt;a href=&#34;https://martinfowler.com/articles/feature-toggles.html&#34;&gt;feature toggles&lt;/a&gt; and backwards compatibility - topics which have featured heavily in our retrospectives.&lt;/p&gt;

&lt;p&gt;As a side note, Snap CI didn’t really live up to expectation but even this generated a few positives. After a experiencing several issues we began investing in using &lt;a href=&#34;http://tech.driftrock.com/post/speeding-up-ci-tests-using-docker/&#34;&gt;Docker for CI&lt;/a&gt; to isolate and take ownership of the build environment. This had many knock-on effects such as using Docker in development and transitioning towards Kubernetes. It also reduced our dependency on our choice of CI/CD tool which soon became really important when &lt;a href=&#34;https://blog.snap-ci.com/blog/2017/02/06/2017-02-06-snap-announcement/&#34;&gt;Snap CI announced it was going away&lt;/a&gt;. Fortunately, we’re now in a much better position to understand what we need, so we’re in the process of moving to &lt;a href=&#34;https://buildkite.com&#34;&gt;Buildkite&lt;/a&gt; (another article for another time !).&lt;/p&gt;

&lt;p&gt;Hopefully that gives you an insight into how we continue to transition towards Continuous Delivery and the patterns that helped us. Our approach continues to evolve as we learn and we recognise that we&amp;rsquo;ve still got some way to go. Summarising all of that effort into four steps certainly oversimplifies, to get to where we are now took many months even for our small team. This journey reminded us that a change like this doesn’t happen overnight and it takes lots of small, unremarkable steps in the right direction.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;other-helpful-resources&#34;&gt;Other Helpful Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://vimeo.com/123616200&#34;&gt;Linda Rising - Myths And Patterns Of Organisational Change&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.amazon.com/gp/product/0321601912&#34;&gt;Continuous Delivery - Jez Humble &amp;amp; Dave Farley&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.hibri.net/2016/06/18/continuous-delivery-rags-to-riches/&#34;&gt;Continuous Delivery - Going from rags to riches - Hibri Marzook&lt;/a&gt; &lt;br /&gt;
&lt;a href=&#34;https://trunkbaseddevelopment.com/&#34;&gt;Trunk Based Development&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;change-patterns-reference&#34;&gt;Change Patterns Reference&lt;/h3&gt;

&lt;p&gt;Paraphrasing slightly from the book here’s a selection of patterns I’ve mentioned above:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Baby Steps&lt;/strong&gt; - Take one small step at a time towards your goal.&lt;br /&gt;
&lt;strong&gt;Involve Everyone&lt;/strong&gt; - Everyone should have an opportunity to make their own contribution.&lt;br /&gt;
&lt;strong&gt;Plant the Seeds&lt;/strong&gt; - Take every opportunity you can to spark interest in an idea.&lt;br /&gt;
&lt;strong&gt;Just Do It&lt;/strong&gt; - Don’t wait for the perfect moment, instead take the first baby step and start learning.&lt;br /&gt;
&lt;strong&gt;Pick your Battles&lt;/strong&gt; - Focus your efforts on the most pressing issues.&lt;br /&gt;
&lt;strong&gt;Trial Run&lt;/strong&gt; - When there’s reluctance to commit to an idea, suggest an experiment for a short period.&lt;br /&gt;
&lt;strong&gt;Wake-up Call&lt;/strong&gt; - Point out the issues that create a need for change.&lt;br /&gt;
&lt;strong&gt;Ask for Help&lt;/strong&gt; - Look for people and resources to help your efforts and encourage involvement.&lt;br /&gt;
&lt;strong&gt;Persistant PR&lt;/strong&gt; - Keep the new idea in front of everyone, consistently promote it in a variety of ways.&lt;br /&gt;
&lt;strong&gt;Smell of Success&lt;/strong&gt; - When your efforts produce a visible positive result, treat this as a teaching moment.&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How we do production release announcements at Driftrock</title>
      <link>https://danbadge.github.io/post/release-notes-at-driftrock/</link>
      <pubDate>Thu, 29 Dec 2016 16:51:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/release-notes-at-driftrock/</guid>
      <description>&lt;p&gt;At Driftrock we&amp;rsquo;re a small company that has grown from 8 to 18 people in the last 9 months. That&amp;rsquo;s not excessive but it still challenged some existing methods of communication. One of those was how we communicate new features which have recently gone live, somewhere along the way we stopped doing this.
&lt;/p&gt;

&lt;h2 id=&#34;shhh-we-re-releasing-software&#34;&gt;Shhh! We&amp;rsquo;re Releasing Software&lt;/h2&gt;

&lt;p&gt;Previously, we deployed a change to one of our applications and didn&amp;rsquo;t tell anyone unless it solved a particular client issue. This meant we wouldn&amp;rsquo;t seek much feedback on new features and the team&amp;rsquo;s progress and activity was largely unseen by the rest of the company. Bearing in mind that our software is increasingly used internally, this seemed like a real missed opportunity.&lt;/p&gt;

&lt;h2 id=&#34;enter-release-crab&#34;&gt;Enter Release Crab&lt;/h2&gt;

&lt;p&gt;Now we have a dedicated Slack channel for internally announcing the release of new features, bug fixes and other changes. The announcement is typically done by a developer after they push their changes to production as they have the most context. But we&amp;rsquo;re pragmatic with it and don&amp;rsquo;t announce every little change, for example, we might wait until we&amp;rsquo;ve finished a sequence of quick deployments. However, &lt;a href=&#34;http://tech.driftrock.com/post/tech-values&#34;&gt;we value feedback&lt;/a&gt; so we&amp;rsquo;re regularly announcing updates.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a few changes going live for Create (an application for quickly creating ads on Facebook):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://danbadge.github.io/img/release-notes.png&#34; alt=&#34;Example release notes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(Note the crab emoji - this is now synonymous with release announcements)&lt;/p&gt;

&lt;p&gt;This seems like a simple and obvious addition to a production deployment but has had surprising impact, here&amp;rsquo;s a few improvements it&amp;rsquo;s made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tighter feedback loop&lt;/strong&gt; - more communication between the Product Development team (us) and the other teams in Driftrock - Performance Marketing (internal users), Sales and Client Solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased accountability and ownership&lt;/strong&gt; - we could automate these release notes but the personal touch adds an element of accountability, giving the readers a point of contact to field any feedback. Therefore the author needs to understand what&amp;rsquo;s going live and (if necessary) what&amp;rsquo;s happening across the team. Gathering this information is required to help the author distil the announcement into something which is simple and concise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keeps deployments small&lt;/strong&gt; - similarly that small amount of manual overhead for the author gives us yet another reason to keep the batch size of a deployment small and ensure we&amp;rsquo;re releasing software early and often.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;future-releases&#34;&gt;Future Releases&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re still getting used to this process and it will certainly evolve. Early ideas to build on this include automating release notes based on commit messages and working out how we can provide our clients with a similar version, possibly even making these public.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Update 09/01/2017: Public facing release notes are now available. They are updated every two weeks with the help of our Client Solutions team and you can find them here - &lt;a href=&#34;http://knowledge.driftrock.com/product-updates&#34;&gt;http://knowledge.driftrock.com/product-updates&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ten deploys a day and still moving slowly</title>
      <link>https://danbadge.github.io/post/ten-deploys-a-day-and-still-moving-slowly/</link>
      <pubDate>Sun, 21 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://danbadge.github.io/post/ten-deploys-a-day-and-still-moving-slowly/</guid>
      <description>

&lt;p&gt;There’s a feeling within my team at &lt;a href=&#34;http://www.7digital.com/&#34;&gt;7digital&lt;/a&gt; that we’re taking a long time to complete projects or features. Oddly this isn’t something we are currently measuring. We do though measure the &lt;a href=&#34;http://blog.robbowley.net/2012/01/06/productivity-throughput-and-cycle-time/&#34;&gt;throughput and cycle time&lt;/a&gt; of tasks. Tasks are items of work which the team create as a small iterative step towards a larger feature or story. This is useful for visualising the teams productivity, with the idealistic target of low cycle time and high throughput.&lt;/p&gt;

&lt;p&gt;Typically our stakeholders are interested in an estimation and delivery of a project or feature not a task. I was interested to see whether this was something we could measure, with a slant towards having historical data available for helping us estimate. I gathered all the tasks into a spreadsheet going back to the beginning of September 2012 and assigned a descriptive project and feature name I hoped the rest of the organisation could understand. This had the added benefit of forcing me to step back from the implementation and attempt to relate technical items to organisation priorities, something which is far too often overlooked.&lt;/p&gt;

&lt;p&gt;This produced some interesting results, which aligned with the team’s fears. Our average lead time of the six planned projects we had completed since September was 160 days. Over half a year! Moreover, this only represents the time it takes for an organisation-wide project to pass-through our team, often there are several teams involved each with their own changes and features to implement. We do roughly two features per project and so it’s a similar story there. On average we’re taking 72 days to complete a feature.&lt;/p&gt;

&lt;p&gt;We have our &lt;a href=&#34;http://martinfowler.com/bliki/DeploymentPipeline.html&#34;&gt;deployment pipeline&lt;/a&gt; at 7digital and deploying changes to production is an absolute breeze. In fact, we’re so good at it we can’t stop talking about it &lt;a href=&#34;http://prezi.com/2wczo541qzpy/dddea-continuous-delivery-at-7digital/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://blogs.7digital.com/dev/2012/06/20/evolution-of-deployment-in-7digital/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://blogs.7digital.com/dev/2012/04/28/how-we-do-deployments/&#34;&gt;here&lt;/a&gt;. So what’s taking us so long to get new features out the door?&lt;/p&gt;

&lt;h2 id=&#34;technical-debt&#34;&gt;Technical Debt&lt;/h2&gt;

&lt;p&gt;We have a lot of technical debt. It’s not tested, it’s horribly coupled and entirely confusing, a proper &lt;a href=&#34;http://en.wikipedia.org/wiki/Big_ball_of_mud&#34;&gt;ball of mud&lt;/a&gt;. We try not too but occasionally we touch it and it can slow development down. We’ve been bitten before too where a change we made broke something unrelated in production. We can roll back with ease though so it’s not all that scary and can’t be entirely accountable for our tame pace.&lt;/p&gt;

&lt;h2 id=&#34;bottlenecks&#34;&gt;Bottlenecks&lt;/h2&gt;

&lt;p&gt;Developing public-facing APIs with numerous existing clients all with their own priorities and ageing implementations presents a challenge in patience and communication. Fortunately, we’ve already made some progress here: In a recent project we needed to migrate a few external API consumers to a new endpoint. We did all the work, communicated the changes and waited. Several months later we started to see some usage only to find out our endpoint wasn’t quite working as expected. To try and mitigate that we have a new policy within our team, dogfooding. We’re now attempting to consume any of our new endpoints we can. There’s two big benefits here: code running in production and failing early.&lt;/p&gt;

&lt;h2 id=&#34;unplanned-projects&#34;&gt;Unplanned Projects&lt;/h2&gt;

&lt;p&gt;Whilst looking back through the data and trying to determine project names, relationships began to emerge between occasional tasks. We found examples of sizeable unplanned projects, not just unplanned tasks, bubbling away in the background. These projects did have clear value and even related back to wider organisational priorities. As a team though we had already committed to other supposedly more important already in-progress projects. Crucially, this results in extended delivery dates on all the projects being worked on.&lt;/p&gt;

&lt;h2 id=&#34;distractions-in-parallel&#34;&gt;Distractions in Parallel&lt;/h2&gt;

&lt;p&gt;I’ve done the maths and six projects at 160 days each in under a year doesn’t add up. We’ve toyed with a number setups but generally we have two streams and therefore two projects or two features on the go at any one time with a pair on each thing (there’s four of us). This means our focus is constantly shifting between those two items whilst we attempt to give them equal attention. Looking at this further, I attempted to determine the amount of days we spent not working on an ‘in-progress’ feature and in every example it dwarfs the amount of days spent working on the feature. Clearly by spreading ourselves across two things we’re generating much more waste then we realise and unlike technical debt and bottlenecks this is one area where we have much more control.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>